[{"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/index.tsx":"1","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/App.tsx":"2","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-list.tsx":"3","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/page-not-found.tsx":"4","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-detail.tsx":"5","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-add.tsx":"6","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-edit.tsx":"7","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/login.tsx":"8","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/services/authentication-service.ts":"9","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/services/fighter-service.ts":"10","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/helpers/format-type.ts":"11","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/helpers/format-date.ts":"12","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-card.tsx":"13","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/loader.tsx":"14","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-search.tsx":"15","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/config.ts":"16","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/context/context.ts":"17","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/privateRouteAll.tsx":"18","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/privateRouteManager.tsx":"19","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/header.tsx":"20","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-form-Add.tsx":"21","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-form-Update.tsx":"22","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/register.tsx":"23"},{"size":154,"mtime":1617725448022,"results":"24","hashOfConfig":"25"},{"size":2167,"mtime":1618797818538,"results":"26","hashOfConfig":"25"},{"size":1469,"mtime":1618691652312,"results":"27","hashOfConfig":"25"},{"size":622,"mtime":1617725448026,"results":"28","hashOfConfig":"25"},{"size":3411,"mtime":1618762395729,"results":"29","hashOfConfig":"25"},{"size":369,"mtime":1618692221294,"results":"30","hashOfConfig":"25"},{"size":1042,"mtime":1618767949973,"results":"31","hashOfConfig":"25"},{"size":3746,"mtime":1618798936484,"results":"32","hashOfConfig":"25"},{"size":2534,"mtime":1618798666465,"results":"33","hashOfConfig":"25"},{"size":1783,"mtime":1618796398686,"results":"34","hashOfConfig":"25"},{"size":766,"mtime":1617725448022,"results":"35","hashOfConfig":"25"},{"size":163,"mtime":1617725448022,"results":"36","hashOfConfig":"25"},{"size":1495,"mtime":1618691703163,"results":"37","hashOfConfig":"25"},{"size":581,"mtime":1617725448022,"results":"38","hashOfConfig":"25"},{"size":1367,"mtime":1618795940749,"results":"39","hashOfConfig":"25"},{"size":170,"mtime":1618274969945,"results":"40","hashOfConfig":"25"},{"size":237,"mtime":1618356033307,"results":"41","hashOfConfig":"25"},{"size":535,"mtime":1618425275723,"results":"42","hashOfConfig":"25"},{"size":456,"mtime":1618425232759,"results":"43","hashOfConfig":"25"},{"size":1668,"mtime":1618798876532,"results":"44","hashOfConfig":"25"},{"size":4947,"mtime":1618767049148,"results":"45","hashOfConfig":"25"},{"size":7063,"mtime":1618768137144,"results":"46","hashOfConfig":"25"},{"size":3365,"mtime":1618798763065,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1wux9qq",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/index.tsx",[],["102","103"],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/App.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-list.tsx",["104"],"import React, { FunctionComponent, useState, useEffect, useContext } from 'react';\nimport FighterCard from '../components/fighter-card';\nimport FighterService from '../services/fighter-service';\nimport { Link } from 'react-router-dom';\nimport FighterSearch from '../components/fighter-search';\nimport context from '../context/context';\n\nexport type Fighter = {\n  _id?: any,\n  types: string,\n  hp: number,\n  cp: number,\n  name: string,\n  picture: string\n}\n\nconst FighterList: FunctionComponent = () => {\n  const [fighters, setFighters] = useState<Fighter[]>([]);\n  const {isAuthenticatedManager, setIsAuthenticatedManager} = useContext(context)\n\n  console.log(isAuthenticatedManager);\n  \n\n  const getData = async() => {\n    await FighterService.getFighters()\n    .then(fighters => setFighters(fighters))\n  }\n  \n  useEffect(() => {\n    getData()\n  }, []);\n    \n  \n  return (\n    <div>\n      <div className=\"container\"> \n        <FighterSearch/>\n        <div className=\"row\"> \n          {fighters.map(fighter => (\n            <FighterCard key={fighter._id} fighter={fighter} />\n          ))}\n        </div>\n        {isAuthenticatedManager && \n          <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n            style={{position: 'fixed', bottom:'25px', right:'25px'}}\n            to=\"/fighter/add\">\n            <i className=\"material-icons\">add</i>\n          </Link>\n        }\n      </div>\n    </div> \n  );\n}\n  \nexport default FighterList;","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/page-not-found.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-detail.tsx",["105"],"import React, { FunctionComponent, useState, useEffect, useContext } from 'react';\nimport { RouteComponentProps, Link, useHistory } from 'react-router-dom';\nimport formatDate from '../helpers/format-date'\nimport formatType from '../helpers/format-type'\nimport FighterService from '../services/fighter-service';\nimport Loader from '../components/loader';\nimport { Fighter } from './fighter-list';\nimport context from '../context/context';\nimport { Box, Button } from '@material-ui/core';\n  \ntype Params = { id: string };\n  \nconst FightersDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [fighter, setfighter] = useState<Fighter|null>(null);\n  const {isAuthenticatedManager} = useContext(context)\n  const history = useHistory();\n    \n  useEffect(() => {\n    FighterService.getFighter(match.params.id)\n    .then(fighter => setfighter(fighter))\n  }, [match.params.id]);\n  \n\n  const handleDelete = () => {\n    FighterService.deleteFighter(match.params.id)\n        history.replace('/fighters')\n  }\n  return (\n    <div>\n      { fighter ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ fighter.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image \">\n                <img src={fighter.picture} alt={fighter.name} style={{width: '210px', margin: '0 auto'}}/>\n                {isAuthenticatedManager && \n                  <Link to={`/fighters/edit/${fighter._id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\n                    <i className=\"material-icons\">edit</i>\n                  </Link>\n                }\n              </div>\n              \n              <div className=\"card-stacked\">\n                <div className=\"card-content \">\n                  <table className=\"bordered striped \">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ fighter.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ fighter.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ fighter.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                           <span className={formatType(fighter.type)}>{fighter.type}</span>\n                        </td> \n                      </tr> \n                    </tbody>\n                  </table>\n                  <div className=\"card-action \">\n                    <Link to=\"/fighters\">Retour</Link>\n                    {isAuthenticatedManager &&\n                        <Link to=\"/fighters\" className=\"band-logo right\">\n                            <Box>\n                                <Button onClick={handleDelete} color=\"secondary\" variant=\"contained\">Supprimer</Button>\n                            </Box>\n                        </Link>\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default FightersDetail;\n","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-add.tsx",["106"],"import React, { FunctionComponent, useState } from 'react';\nimport FighterFormAdd from '../components/fighter-form-Add';\n \n  \nconst FighterAdd: FunctionComponent = () => {\n      \n  return (\n        <div className=\"row\">\n            <h2 className=\"header center\">Ajouter un fighter </h2>\n            <FighterFormAdd />\n        </div>\n  );\n}\n  \nexport default FighterAdd;","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/fighter-edit.tsx",["107"],"import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport FighterFormUpdate from '../components/fighter-form-Update';\nimport Loader from '../components/loader';\nimport FighterService from '../services/fighter-service';\nimport { Fighter } from './fighter-list';\n \ntype Params = { id: string };\n  \nconst FighterEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [fighter, setfighter] = useState<Fighter|null>(null);\n\n  const getData = async() => {\n    await FighterService.getFighter(match.params.id).then(fighter => setfighter(fighter))\n  }\n  \n  useEffect(() => {\n    getData()\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { fighter ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { fighter.name }</h2>\n            <FighterFormUpdate fighter={fighter} />\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default FighterEdit;","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/login.tsx",["108"],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/services/authentication-service.ts",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/services/fighter-service.ts",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/helpers/format-type.ts",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/helpers/format-date.ts",[],["109","110"],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-card.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/loader.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-search.tsx",["111"],"import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { Fighter } from '../pages/fighter-list'\nimport FighterService from '../services/fighter-service';\n \nconst FighterSearch: FunctionComponent = () => {\n  \n  const [term, setTerm]         = useState<string>('');\n  const [fighters, setFighters] = useState<Fighter[]>([]);\n \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term);\n    console.log(term);\n    \n    if(term.length <= 1) {\n        setFighters([]);\n        return;\n    }\n    \n    FighterService.searchFighter(term).then(fighters => setFighters(fighters));\n}\n\n  return (\n    <div className=\"row\" > \n    <div className=\"col s12 m6 offset-m3\"> \n      <div className=\"card\"> \n      <div className=\"card-content\"> \n        <div className=\"input-field\"> \n        <input type=\"text\" placeholder=\"Rechercher un fighter\" value={term} onChange={e => handleInputChange(e)} /> \n        </div> \n        <div className='collection' >\n        {fighters.map((fighter) => (\n          <Link key={fighter._id} to={`/fighters/${fighter._id}`} className=\"collection-item\" >\n            {fighter.name}\n          </Link>\n        ))}\n        </div> \n      </div> \n      </div> \n    </div> \n    </div>\n  );\n}\n  \nexport default FighterSearch;","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/config.ts",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/context/context.ts",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/privateRouteAll.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/privateRouteManager.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/header.tsx",["112","113","114","115"],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-form-Add.tsx",[],"/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/components/fighter-form-Update.tsx",["116","117"],"import React, { FunctionComponent, useState } from 'react';\nimport formatType from '../helpers/format-type';\nimport { Link, useHistory } from 'react-router-dom'\nimport FighterService from '../services/fighter-service';\nimport { Fighter } from '../pages/fighter-list';\n\n  \ntype Props = {\n  fighter: Fighter\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n}\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  type: Field\n}\n  \nconst FighterFormUpdate: FunctionComponent<Props> = ({fighter}) => {\n  \n    const [form, setForm] = useState<Form>({\n        picture : {value: fighter.picture},\n        name    : {value: fighter.name, isValid:true},\n        hp      : {value: fighter.hp, isValid:true},\n        cp      : {value: fighter.cp, isValid:true},\n        type   : {value: fighter.type, isValid:true},\n    })    \n    const history = useHistory();\n  \n    const types: string[] = [\n        'Sayan', 'Namek', 'Pride Toopers', 'Dieu de la destruction', 'Hitman', 'Planet freezer',\n        'Cyborg'\n    ];\n\n  //  Permet de vérifier si le fighter as déja ce type\n  const hasType = (type: string): boolean => {\n    return form.type.value === type;\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes: any = type;\n      newField = { value: newTypes };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.type.value !== type;\n      newField = { value: newTypes };\n      return\n    }\n\n    setForm({...form, ...{ type: newField }});\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    // Si nos champs sont valide redirection\n    const newFighter = {\n      picture: form.picture.value,\n      name: form.name.value,\n      hp: form.hp.value,\n      cp: form.cp.value,\n      type: form.type.value\n    }\n    console.log(newFighter);\n    \n      FighterService.updateFighter(fighter._id,newFighter).then(() => history.push(`/fighters/${fighter._id}`))\n    \n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le figther a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le fighter aurait 0 type, ce qui est interdit)\n    if (form.type.value == hasType(type)) {\n      return false;\n    }\n    \n    // Après avoir passé le test ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n\n  const deleteFighter = () => {\n    FighterService.deleteFighter(fighter._id)\n    .then(() => history.push(`/fighters`))\n  }\n\n  \n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"car-image\">\n              <img src={fighter.picture} alt={fighter.name} style={{width: '200px', marginLeft: '40%'}}/>\n              <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                <i onClick={deleteFighter} className=\"material-icons\">delete</i>\n              </span>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* fighter image */}\n                {/* { isAddForm() && (\n                  <div className=\"form-group\">\n                    <label htmlFor=\"picture\">Image</label>\n                    <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                    {form.picture.error && \n                    <div className=\"card-panel red accent-1\">\n                        {form.picture.error}\n                    </div>}\n                  </div>    \n                )} */}\n                {/* fighter name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error && \n                    <div className=\"card-panel red accent-1\">\n                        {form.name.error}\n                    </div>\n                  }\n                </div>\n                {/* fighter hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error && \n                    <div className=\"card-panel red accent-1\">\n                        {form.hp.error}\n                    </div>\n                  }\n                </div>\n                {/* fighter cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error && \n                    <div className=\"card-panel red accent-1\">\n                        {form.cp.error}\n                    </div>\n                  }\n                </div>\n                {/* fighter types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                      {/* disabled={isTypesValid(type)}  */}\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"card-action \">\n                    <Link to=\"/fighters\">Retour</Link>\n                  </div>\n                <div className=\"center\">\n                  {/* Submit button */}\n                  <button className=\"btn\" type=\"submit\" >Valider</button>\n              </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default FighterFormUpdate;","/home/djepeno/Bureau/site/Projets_MERN/DragonballZ_MERN/src/pages/register.tsx",["118","119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":19,"column":34,"nodeType":"127","messageId":"128","endLine":19,"endColumn":59},{"ruleId":"125","severity":1,"message":"129","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":18},{"ruleId":"125","severity":1,"message":"130","line":1,"column":36,"nodeType":"127","messageId":"128","endLine":1,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":20,"column":6,"nodeType":"133","endLine":20,"endColumn":23,"suggestions":"134"},{"ruleId":"125","severity":1,"message":"135","line":6,"column":6,"nodeType":"127","messageId":"128","endLine":6,"endColumn":11},{"ruleId":"121","replacedBy":"136"},{"ruleId":"123","replacedBy":"137"},{"ruleId":"125","severity":1,"message":"138","line":1,"column":36,"nodeType":"127","messageId":"128","endLine":1,"endColumn":45},{"ruleId":"125","severity":1,"message":"139","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":34},{"ruleId":"125","severity":1,"message":"130","line":1,"column":36,"nodeType":"127","messageId":"128","endLine":1,"endColumn":44},{"ruleId":"125","severity":1,"message":"138","line":1,"column":46,"nodeType":"127","messageId":"128","endLine":1,"endColumn":55},{"ruleId":"125","severity":1,"message":"140","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":29},{"ruleId":"125","severity":1,"message":"141","line":90,"column":9,"nodeType":"127","messageId":"128","endLine":90,"endColumn":21},{"ruleId":"142","severity":1,"message":"143","line":93,"column":25,"nodeType":"144","messageId":"145","endLine":93,"endColumn":27},{"ruleId":"125","severity":1,"message":"139","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":34},{"ruleId":"125","severity":1,"message":"138","line":1,"column":46,"nodeType":"127","messageId":"128","endLine":1,"endColumn":55},{"ruleId":"125","severity":1,"message":"135","line":5,"column":6,"nodeType":"127","messageId":"128","endLine":5,"endColumn":11},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"@typescript-eslint/no-unused-vars","'setIsAuthenticatedManager' is assigned a value but never used.","Identifier","unusedVar","'formatDate' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["148"],"'Field' is defined but never used.",["146"],["147"],"'useEffect' is defined but never used.","'FunctionComponent' is defined but never used.","'RouteComponentProps' is defined but never used.","'isTypesValid' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},"Update the dependencies array to be: [getData, match.params.id]",{"range":"151","text":"152"},[692,709],"[getData, match.params.id]"]